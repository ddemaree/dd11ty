---
import clsx, { ClassValue } from 'clsx';

export interface Props {
  content?: string;
  class?: ClassValue;
}

const { content, class: classValue } = Astro.props;

const wrapperClass = clsx('prose', classValue);
---

<div class={wrapperClass}>
  <slot />
</div>

<style is:global>
@layer patterns {

  .site-layout-main:has(.prose) {
    padding-inline: 0;
  }

  .prose {
    --prose-text-size: clamp(17px, 2.5vw, 20px);
    
    /* Indent for lists/block quotes */
    --prose-indent: 1.5em;

    --prose-flow-spacing-xs: calc(var(--prose-text-size) * 0.375);
    --prose-flow-spacing-sm: calc(var(--prose-text-size) * 0.75);
    --prose-flow-spacing-normal: calc(var(--prose-text-size) * 1.5);
    --prose-flow-spacing-big: calc(var(--prose-text-size) * 3);

    /* TODO: This is a magic number that happens to match (wideWidth - contentWidth) / 2, should make that relationship more explicit */
    --prose-grid-inset: minmax(var(--dd-layout-padding-inline), 7rem); 

    display: grid;
    grid-auto-flow: row;
    /* prettier-ignore */
    grid-template-columns: [full-start] 1fr [wide-start] var(--prose-grid-inset) [content-start] min( calc(100% - (var(--dd-layout-padding-inline) * 2)), var(--width-content) ) [content-end] var(--prose-grid-inset) [wide-end] 1fr [full-end];
    justify-items: start;
    padding-block-start: var(--prose-flow-spacing-normal);
    
    > :is(*, p, .aligncontent) {
      grid-column: content;
    }

    > .alignwide,
    > .size-large {
      grid-column: wide;
    }

    > .alignfull {
      grid-column: full;
    }

    .wp-block-embed {
      justify-self: center;
    }

    font-size: var(--prose-text-size);
    line-height: 1.6;

    & :where(* + *),
    & :where(blockquote * + *) {
      margin-block-start: var(--prose-flow-spacing-normal);
    }

    & > * + :where(figure, img, picture, hr, pre[class*="language-"]) {
      margin-block-start: var(--prose-flow-spacing-big);
    }

    & > :where(figure, img, picture, hr, pre[class*="language-"]) + * {
      margin-block-start: var(--prose-flow-spacing-big);
    }

    :where(img, iframe) {
      margin: unset;
      width: 100%;
      height: auto;
      max-width: 100%;
    }

    :where(a) {
      color: var(--color-text-active);
    }

    :where(a:hover) {
      color: var(--color-text-active);
    }

    :where(b, strong) {
      color: var(--color-text-high-emphasis);
      font-weight: 600;
    }

    :where(a, blockquote, thead th) :where(b, strong) {
      color: inherit;
    }

    :where(h1, h2, h3, h4, h5, h6) {
      color: var(--color-text-high-emphasis);
      font-family: var(--font-sans);
      font-weight: 600;
      letter-spacing: -0.01ch;
      line-height: 1.1;

      &:has(+ figure) {
        margin-block-end: -0.75em;
      }

      + :where(p) {
        margin-block-start: var(--prose-flow-spacing-sm);
      }

      :where(b, strong) {
        color: inherit;
        font-weight: 700;
      }
    }

    :where(* + :where(h1, h2, h3, h4, h5, h6)) {
      margin-block-start: var(--prose-flow-spacing-big);
    }

    :where(h1) {
      font-size: 2em;
    }

    :where(h2) {
      font-size: 1.75em;
    }

    :where(h3) {
      font-size: 1.5em;
    }

    :where(ol, ul) {
      padding-inline-start: var(--prose-indent);

      :where(ol, ul) {
        margin-block: var(--prose-flow-spacing-xs) 0;
      }

      :where(> li) {
        padding-inline-start: 0.375em;
      }
    }

    > :where(ol, ul) {
      > li p {
        margin-block: 0.75em;
      }
    }

    li {
      margin-block: var(--prose-flow-spacing-xs);
    }

    ol {
      list-style-type: decimal;
    }

    ul {
      list-style-type: disc;
    }

    ol > li::marker {
      font-family: var(--font-sans);
      font-weight: 600;
      font-size: 0.875em;
    }

    ul > li::marker {
    }

    :where(ul, ol) :where(ul, ol) {
      margin-block-start: 0.5em;
      margin-block-end: 0;
    }

    hr {
      border-color: var(--color-hairline);
      border-top-width: 1px;

      + * {
        margin-block-start: 0;
      }
    }

    :where(blockquote) {
      --prose-quote-border-width: 0.20rem;
      border-inline-start-color: var(--color-hairline);
      border-inline-start-style: solid;
      border-inline-start-width: var(--prose-quote-border-width);
      color: var(--color-text-low-emphasis);
      font-family: var(--font-sans);
      padding-inline-start: calc(var(--prose-indent) - var(--prose-quote-border-width) - 0.5rem);
      padding-inline-end: var(--prose-indent);

      margin-inline-start: 0.5rem;
    }

    figure blockquote {
      margin: 0;
    }

    :where(figure) {
      align-items: center;
      display: flex;
      flex-direction: column;
      width: 100%;
    }

    :where(figcaption, .wp-block-pullquote__citation) {
      color: var(--color-text-low-emphasis);
      font-family: var(--font-sans);
      font-size: 0.875em;
      line-height: 1.375;
      margin-block-start: 1em;
      margin-block-end: 0;
      max-width: 60ch;
      text-align: center;
      padding-inline: var(--dd-layout-padding-inline);
    }

    code {
      color: var(--color-text-code);
      font-family: var(--font-mono);
      font-weight: 500;
    }

    :where(a, h1, h2, h3, h4, h5, h6, blockquote, thead th) code {
      color: inherit;
    }

    pre {
      color: var(--color-text-code);
      font-family: var(--font-mono);
      font-weight: 400;
      overflow-x: auto;

      code {
        background-color: transparent;
        color: inherit;
        font-weight: inherit;
        font-size: inherit;
      }
    }

    :where(.wp-block-embed__wrapper) {
      display: contents;
    }

    :where(figure) :where(iframe[src*="youtube.com"], iframe[src*="cloudinary.com"]) {
      aspect-ratio: 16 / 9;
      height: auto;
      width: 100%;
    }

    :where(figure[class*="gallery"]) {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      gap: var(--prose-flow-spacing-sm);
      align-items: unset;

      :where(figure:has(img)) {
        display: flex;
        flex-direction: row;
        flex-grow: 1;
        margin: unset;
        width: calc(50% - (var(--prose-flow-spacing-sm) / 2));

        img {
          flex: 1 0 0%;
          height: 100%;
          object-fit: cover;
          width: 100%;
        }
      }
    }
  }

  .drop-cap .initial {
    font-family: 'RoslindaleDisplayCapsVariable';
    float: left;
    font-size: 5.25em;
    font-variation-settings: "wdth" 120;
    font-weight: 340;
    line-height: 1;
    margin-right: 0.1em;
  }

  .drop-cap .initial:before,
  .drop-cap .initial:after {
    content: "";
    display: block;
  }

  .drop-cap .initial:after {
    margin-top: -0.25em;
  }

  .drop-cap .initial:before {
    margin-bottom: 4px;
  }  
}

</style>